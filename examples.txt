true;
let x = true in x;
if false then true else false;
0;
x = true;
succ (succ (succ 0));
3;
succ (pred 0);
iszero (pred (succ (succ 0)));
if iszero 3 then 0 else 1;
iszero true;
if 1 then true else false;
if iszero 3 then 0 else false;
let id = Lx.x in id 3;
let id_bool = L x:Bool. x in id_bool true;
let id_nat = L x:Nat. x in id_nat 5;
let x = 5 in let id_nat = L x:Nat. x in id_nat x;

letrec sum : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
sum 21 34
;

letrec sum : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
letrec prod : Nat -> Nat -> Nat = 
lambda n : Nat. lambda m: Nat. if iszero n then 0 else sum m (prod (pred n) m) in 
prod 8 5
;

letrec sum : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
letrec fib : Nat -> Nat = 
lambda n : Nat. if iszero n then 0 else if iszero (pred n) then 1 else sum (fib (pred n) ) (fib (pred (pred n)) ) in
fib 11;



